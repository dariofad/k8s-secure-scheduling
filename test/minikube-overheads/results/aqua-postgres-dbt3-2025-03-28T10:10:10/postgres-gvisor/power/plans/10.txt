BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-11-01'
	and o_orderdate < cast(date '1993-11-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76527.76..76527.81 rows=20 width=201)
   ->  Sort  (cost=76527.76..76613.53 rows=34308 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=70670.92..75614.84 rows=34308 width=201)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Gather Merge  (cost=70670.92..74542.71 rows=28590 width=201)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=69670.89..70242.69 rows=14295 width=201)
                           Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                           ->  Sort  (cost=69670.89..69706.63 rows=14295 width=181)
                                 Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                                 ->  Nested Loop  (cost=6088.83..68684.31 rows=14295 width=181)
                                       ->  Hash Join  (cost=6088.40..10076.34 rows=3867 width=177)
                                             Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=6086.84..10062.90 rows=3867 width=155)
                                                   Hash Cond: (customer.c_custkey = orders.o_custkey)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..3754.88 rows=54688 width=147)
                                                   ->  Parallel Hash  (cost=6038.50..6038.50 rows=3867 width=12)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..6038.50 rows=3867 width=12)
                                                               Filter: ((o_orderdate >= '1993-11-01'::date) AND (o_orderdate < '1994-02-01'::date))
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                       ->  Index Scan using lineitem_l_orderkey_idx_l_returnflag on lineitem  (cost=0.43..15.12 rows=4 width=20)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
(24 rows)

COMMIT;
COMMIT
