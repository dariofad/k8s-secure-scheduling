BEGIN;
BEGIN
EXPLAIN
select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	customer,
	orders,
	lineitem,
	supplier,
	nation,
	region
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = 'EUROPE'
	and o_orderdate >= date '1994-01-01'
	and o_orderdate < date '1994-01-01' + interval '1 year'
group by
	n_name
order by
	revenue desc;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=57487.97..57488.03 rows=25 width=58)
   Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
   ->  Finalize GroupAggregate  (cost=57461.24..57487.39 rows=25 width=58)
         Group Key: nation.n_name
         ->  Gather Merge  (cost=57461.24..57486.70 rows=50 width=58)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=56461.22..56480.90 rows=25 width=58)
                     Group Key: nation.n_name
                     ->  Sort  (cost=56461.22..56465.09 rows=1550 width=38)
                           Sort Key: nation.n_name
                           ->  Hash Join  (cost=3889.85..56379.08 rows=1550 width=38)
                                 Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop  (cost=3513.85..55746.23 rows=48924 width=50)
                                       ->  Hash Join  (cost=3513.42..9697.73 rows=3285 width=42)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..6089.88 rows=16425 width=12)
                                                   Filter: ((o_orderdate >= '1994-01-01'::date) AND (o_orderdate < '1995-01-01 00:00:00'::timestamp without time zone))
                                             ->  Hash  (cost=3185.29..3185.29 rows=26250 width=38)
                                                   ->  Nested Loop  (cost=77.89..3185.29 rows=26250 width=38)
                                                         ->  Nested Loop  (cost=0.14..13.95 rows=5 width=30)
                                                               Join Filter: (region.r_regionkey = nation.n_regionkey)
                                                               ->  Index Scan using pk_nation on nation  (cost=0.14..12.51 rows=25 width=34)
                                                               ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'EUROPE'::bpchar)
                                                         ->  Bitmap Heap Scan on customer  (cost=77.75..581.77 rows=5250 width=8)
                                                               Recheck Cond: (c_nationkey = nation.n_nationkey)
                                                               ->  Bitmap Index Scan on customer_c_nationkey_c_custkey_idx  (cost=0.00..76.44 rows=5250 width=0)
                                                                     Index Cond: (c_nationkey = nation.n_nationkey)
                                       ->  Index Scan using pk_lineitem on lineitem  (cost=0.43..13.87 rows=15 width=24)
                                             Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Hash  (cost=257.20..257.20 rows=7920 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..257.20 rows=7920 width=8)
(33 rows)

COMMIT;
COMMIT
