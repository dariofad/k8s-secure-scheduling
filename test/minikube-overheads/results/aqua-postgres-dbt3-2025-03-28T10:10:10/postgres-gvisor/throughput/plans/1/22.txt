BEGIN;
BEGIN
EXPLAIN
select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone from 1 for 2) as cntrycode,
			c_acctbal
		from
			customer
		where
			substring(c_phone from 1 for 2) in
				('22', '26', '33', '25', '14', '20', '18')
			and c_acctbal > (
				select
					avg(c_acctbal)
				from
					customer
				where
					c_acctbal > 0.00
					and substring(c_phone from 1 for 2) in
						('22', '26', '33', '25', '14', '20', '18')
			)
			and not exists (
				select
					*
				from
					orders
				where
					o_custkey = c_custkey
			)
	) as vip
group by
	cntrycode
order by
	cntrycode;
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=11942.69..12037.20 rows=708 width=72)
   Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
   InitPlan 1
     ->  Finalize Aggregate  (cost=5648.12..5648.13 rows=1 width=32)
           ->  Gather  (cost=5647.90..5648.11 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=4647.90..4647.91 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..4643.55 rows=1740 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{22,26,33,25,14,20,18}'::text[])))
   ->  Gather Merge  (cost=6294.56..6370.78 rows=590 width=72)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=5294.54..5302.65 rows=295 width=72)
               Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Sort  (cost=5294.54..5295.28 rows=295 width=38)
                     Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                     ->  Nested Loop Anti Join  (cost=0.42..5282.44 rows=295 width=38)
                           ->  Parallel Seq Scan on customer  (cost=0.00..4643.55 rows=638 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{22,26,33,25,14,20,18}'::text[])))
                           ->  Index Only Scan using orders_o_custkey_idx on orders  (cost=0.42..2.04 rows=4 width=4)
                                 Index Cond: (o_custkey = customer.c_custkey)
(20 rows)

COMMIT;
COMMIT
