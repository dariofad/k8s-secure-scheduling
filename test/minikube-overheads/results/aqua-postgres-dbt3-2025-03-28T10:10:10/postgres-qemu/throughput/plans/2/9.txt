BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%cornsilk%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=148107.97..148122.44 rows=107 width=90)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=148107.97..148119.93 rows=90 width=90)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=147107.95..147109.52 rows=45 width=90)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=147107.95..147108.06 rows=45 width=81)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=124690.35..147106.71 rows=45 width=81)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=124688.79..147104.90 rows=45 width=31)
                                 ->  Nested Loop  (cost=124688.37..147084.45 rows=45 width=35)
                                       ->  Parallel Hash Join  (cost=124688.08..147068.41 rows=53 width=39)
                                             Hash Cond: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                             ->  Parallel Seq Scan on partsupp  (cost=0.00..16546.92 rows=263892 width=14)
                                             ->  Parallel Hash  (cost=120962.87..120962.87 rows=163281 width=37)
                                                   ->  Parallel Hash Join  (cost=4319.92..120962.87 rows=163281 width=37)
                                                         Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                                         ->  Parallel Seq Scan on lineitem  (cost=0.00..111440.69 rows=1981769 width=33)
                                                         ->  Parallel Hash  (cost=4236.62..4236.62 rows=6664 width=4)
                                                               ->  Parallel Seq Scan on part  (cost=0.00..4236.62 rows=6664 width=4)
                                                                     Filter: ((p_name)::text ~~ '%cornsilk%'::text)
                                       ->  Index Scan using pk_supplier on supplier  (cost=0.29..0.30 rows=1 width=8)
                                             Index Cond: (s_suppkey = lineitem.l_suppkey)
                                 ->  Index Scan using pk_orders on orders  (cost=0.42..0.45 rows=1 width=12)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 47
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(31 rows)

COMMIT;
COMMIT
