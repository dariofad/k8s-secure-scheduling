BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1994-04-01'
	and o_orderdate < cast(date '1994-04-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=103922.06..103922.11 rows=20 width=202)
   ->  Sort  (cost=103922.06..104008.06 rows=34400 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1004.57..103006.69 rows=34400 width=202)
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Incremental Sort  (cost=1004.57..101716.69 rows=34400 width=182)
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1001.68..100168.69 rows=34400 width=182)
                           ->  Merge Join  (cost=1001.53..99323.72 rows=34400 width=160)
                                 Merge Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Gather Merge  (cost=1000.88..168489.27 rows=45107 width=16)
                                       Workers Planned: 2
                                       ->  Nested Loop  (cost=0.85..162282.77 rows=18795 width=16)
                                             ->  Parallel Index Scan using orders_o_custkey_idx on orders  (cost=0.42..60410.42 rows=11082 width=12)
                                                   Filter: ((o_orderdate >= '1994-04-01'::date) AND (o_orderdate < '1994-07-01'::date))
                                             ->  Index Scan using lineitem_l_orderkey_idx_l_returnflag on lineitem  (cost=0.43..9.16 rows=3 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                 ->  Index Scan using pk_customer on customer  (cost=0.29..7391.47 rows=62500 width=148)
                           ->  Memoize  (cost=0.15..0.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using pk_nation on nation  (cost=0.14..0.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 27
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(27 rows)

COMMIT;
COMMIT
