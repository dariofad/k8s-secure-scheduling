BEGIN;
BEGIN
EXPLAIN
select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	customer,
	orders,
	lineitem
where
	o_orderkey in (
		select
			l_orderkey
		from
			lineitem
		group by
			l_orderkey having
				sum(l_quantity) > 313
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
LIMIT 100;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=575922.17..575973.27 rows=100 width=75)
   ->  GroupAggregate  (cost=575922.17..796864.59 rows=432337 width=75)
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Incremental Sort  (cost=575922.17..784975.33 rows=432337 width=48)
               Sort Key: orders.o_totalprice DESC, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               Presorted Key: orders.o_totalprice, orders.o_orderdate
               ->  Nested Loop  (cost=575921.72..765520.16 rows=432337 width=48)
                     ->  Nested Loop  (cost=575921.29..634648.71 rows=120063 width=51)
                           ->  Gather Merge  (cost=575920.86..589904.17 rows=120063 width=32)
                                 Workers Planned: 2
                                 ->  Sort  (cost=574920.83..575045.90 rows=50026 width=32)
                                       Sort Key: orders.o_totalprice DESC, orders.o_orderdate
                                       ->  Merge Join  (cost=567311.47..571016.21 rows=50026 width=32)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Sort  (cost=87756.63..89058.71 rows=520833 width=24)
                                                   Sort Key: orders.o_orderkey
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..27620.33 rows=520833 width=24)
                                             ->  Sort  (cost=479554.84..479855.00 rows=120063 width=8)
                                                   Sort Key: lineitem_1.l_orderkey
                                                   ->  HashAggregate  (cost=420066.13..469425.46 rows=120063 width=8)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         Planned Partitions: 16
                                                         ->  Seq Scan on lineitem lineitem_1  (cost=0.00..131711.46 rows=4501146 width=13)
                           ->  Memoize  (cost=0.43..0.46 rows=1 width=23)
                                 Cache Key: orders.o_custkey
                                 Cache Mode: logical
                                 ->  Index Scan using pk_customer on customer  (cost=0.42..0.45 rows=1 width=23)
                                       Index Cond: (c_custkey = orders.o_custkey)
                     ->  Index Scan using pk_lineitem on lineitem  (cost=0.43..0.97 rows=12 width=13)
                           Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

COMMIT;
COMMIT
