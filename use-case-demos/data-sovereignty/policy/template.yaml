apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8srequirespecificnodeaffinity
  annotations:
    metadata.gatekeeper.sh/title: "Required Node Affinity"
    metadata.gatekeeper.sh/version: 1.0.1
    description: >-
      Requires pods to contain a specified node affinity expression restricted
      in the available values.
spec:
  crd:
    spec:
      names:
        kind: K8sRequireSpecificNodeAffinity
      validation:
        openAPIV3Schema:
          type: object
          properties:
            expression:
              description: >-
                The upper bound of the node affinity match expression the pod
                must specify.
              type: object
              properties:
                key:
                  description: The required key.
                  type: string
                operator:
                  description: The required operator.
                  type: string
                values:
                  desription: >-
                    List of the allowed values. If the list is empty it allows
                    all values.
                  type: array
                  items:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequirednodeaffinity

        import future.keywords.contains
        import future.keywords.if
        import future.keywords.in

        # missing node selector terms
        violation contains {"msg": msg} if {
          not input.review.object.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms

          podName := input.review.object.metadata.name
          msg := sprintf("pod <%v> does not specify a node affinity required during scheduling", [podName])
        }

        # empty node selector terms
        violation contains {"msg": msg} if {
          nodeSelectorTerms := input.review.object.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms
          nodeSelectorTerms == null

          podName := input.review.object.metadata.name
          msg := sprintf("pod <%v> does not specify a node affinity required during scheduling", [podName])
        }

        # missing required key in at least one node selector term
        violation contains {"msg": msg} if {
          some nodeSelectorTerm in input.review.object.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms
          required := input.parameters.expression.key
          provided := {exp.key | some exp in nodeSelectorTerm.matchExpressions}
          not required in provided
          
          podName := input.review.object.metadata.name
          msg := sprintf("pod <%v> does not specify the required node affinity key <%v> on all node terms", [podName, required])
        }

        # wrong operator
        violation contains {"msg": msg} if {
          some nodeSelectorTerm in input.review.object.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms
          required_exp := input.parameters.expression
          some provided_exp in nodeSelectorTerm.matchExpressions
          provided_exp.key == required_exp.key
          provided_exp.operator != required_exp.operator

          podName := input.review.object.metadata.name
          msg := sprintf("pod <%v> specifies the required node affinity key <%v> with the wrong operator. Operator <%v> must be used.", [podName, required_exp.key, required_exp.operator])
        }

        # wrong values
        violation contains {"msg": msg} if {
          some nodeSelectorTerm in input.review.object.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms
          required_exp := input.parameters.expression
          count(required_exp.values) > 0 # ignore this check when the list of values is empty
          some provided_exp in nodeSelectorTerm.matchExpressions
          provided_exp.key == required_exp.key
          provided := {value | some value in provided_exp.values}
          known := {value | some value in required_exp.values}

          unknown = provided - known
          count(unknown) != 0

          podName := input.review.object.metadata.name
          msg := sprintf("pod <%v> specifies the required node affinity key <%v> with unknown values: <%v>", [podName, required_exp.key, unknown])
        }
